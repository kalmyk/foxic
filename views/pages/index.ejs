<!DOCTYPE html>
<html>

<head>
      <title>Data Stream Aggregation Table</title>
      <meta name = "keywords" content = "wamp, mqtt, gate, queue, message, broker, router, socket, subscribe, bigdata" />
      <meta name = "description" content = "Data Stream Aggregation Table" />
      <meta name = "author" content = "Kalmyk" />
      <meta http-equiv = "Content-Type" content = "text/html; charset = UTF-8" />
</head>

<body>

<a href="https://github.com/kalmyk/fox-wamp/" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"><img alt="Fork me on GitHub" class="attachment-full size-full" data-recalc-dims="1" height="149" src="https://github.blog/wp-content/uploads/2008/12/forkme_right_orange_ff7600.png?resize=149%2C149" width="149" /></a>

<h2>Data Stream Aggregation Table</h2>

<p>
    What if to define table structure with aggregation functions in the same information schema?
</p>
<p>
    The idea is to have definitions of cross table relations and calculation rules in one place. 
    Such table scheme could easy listen to the events stream and do changes
    in the related tables accordingly.
</p>
<p>
    The functionality aimed to provide rapid access to continuously changed
    data to the modern web application.
</p>
<p>
    The changes in tables could be transformed and
    propagated as same events to the another aggregation tables 
    where it could be mixed with another sources.
    Aggregate engine provides data change events for the subscribed clients.
    In the same way standard web queue could subscribe to such the aggregated
    event sources.
</p>
<p>
    In general the idea looks like materialized view that is gathered on event stream.
    The information schema provides ability to validate incoming messages against the schema.
</p>

<pre>
    "invoice": {
        "type": "object",
        "properties": {
            "date": { "type": "string" },
            "customer": { "type": "string" },
            "amount": { "type": "string" }
        },
        "primary_key":[ "date", "customer" ],
        "propagate":{
            "detail":[{
                "key": [ "customer" ],
                "fields": { "total": "amount" }
            }]
        }
    },

    "detail": {
        "type": "aggregate",
        "properties": {
            "customer": { "type": "string" },
            "total": { "type": "string" }
        },
        "primary_key": [ "customer" ],
        "sum": [ "amount" ]
    }
</pre>

<!-- Place this tag where you want the button to render. -->
<a class="github-button"
  href="https://github.com/kalmyk/fox-wamp"
  title="Visit github"
>Visit fox-wamp on github</a>

<!-- Place this tag in your head or just before your close body tag. -->
<script async defer src="https://buttons.github.io/buttons.js"></script>

<p>
    Here you can find a chat demo that uses
    <a href="https://reactjs.org">react</a> and
    <a href="https://github.com/jamiebuilds/unstated">unstated</a>
    as propagation platform of the events.
</p>

</body>

</html>
